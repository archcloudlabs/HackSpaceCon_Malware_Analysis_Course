#!/usr/bin/env python3
import sys
import json
from dataclasses import dataclass
try:
    import requests
except ImportError as err:
    print(f"Error import {err}")
    sys.exit(1)

url = "https://hybrid-analysis.com/feed?json"

@dataclass
class malwareStruct:
    md5: str
    sha1: str
    sha256: str
    tags: str
    domains: list
    process_list: str
    threatscore: int
    vt: int
    ms: int


def pulsedive(ip):
    """
    query an IP address against PulseDive's API

    returns JSON string
    """
    req = requests.get(f"https://pulsedive.com/api/explore.php?q={ip}")
    if req.status_code == 200:
        return (json.loads(req.content))

def greynoise(ip):
    """
    query an IP address against GreyNoise's API

    returns JSON string
    """
    req = requests.get(f"https://api.greynoise.io/v3/community/{ip}")
    if req.status_code == 200:
        return (json.loads(req.content))


def process_data(data):
    """
    get data from hybrid-analysis public feed and then enrich/parse it.
    data: JSON blob of data from hybrid-analysis

    return: None
    """
    for entry in data.get('data'):
        malObj = malwareStruct

        malObj.md5 = entry.get('md5')
        malObj.sha256 = entry.get('sha256')
        malObj.tags = entry.get('tags')
        malObj.domains = entry.get('domains')
        malObj.process_list = entry.get('process_list')
        malObj.threatscore = entry.get('threatscore')
        malObj.vt = entry.get('vt_detect')
        malObj.ms = entry.get('ms_detect')
        malObj.ips = entry.get('hosts')

        __printer_helper__(malObj)

        if malObj.ips is not None:
            [print(greynoise(ip)) for ip in malObj.ips]

def __printer_helper__(malObj):
    """
    Helper function to print dataclass
    """
    print(f"{malObj.md5}, {malObj.domains}, {malObj.ips}, {malObj.threatscore}")

if __name__ == "__main__":

    headers = {"User-Agent": "Arch Cloud Labs"}
    req = requests.get(url, headers=headers)
    if req.status_code == 200:
        data = json.loads(req.content)
        process_data(data)
    else:
        print(f"Error making request - status code: f{req.status_code}")
        sys.exit(1)
